<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts ✏️ on An internet page</title><link>http://rasheddoha.github.io/posts/</link><description>Recent content in Posts ✏️ on An internet page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;#169; Rashed Doha. All rights reserved.</copyright><lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://rasheddoha.github.io/posts/rss.xml" rel="self" type="application/rss+xml"/><item><title>Google interview problem: Drop an egg without breaking it</title><link>http://rasheddoha.github.io/2020/07/google-interview-problem-drop-an-egg-without-breaking-it/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2020/07/google-interview-problem-drop-an-egg-without-breaking-it/</guid><description>&lt;p>&lt;img src="images//twoeggs.png#featured" alt="two-eggs">&lt;/p>
&lt;p>Although I do enjoy digging my feet into newer tricks and techniques when competiting, I really like problems that test your understanding of an algorithm or data structure at a deeper level.&lt;/p>
&lt;p>During my days working as a software engineer, we&amp;rsquo;d often take coffee breaks which would eventually lead to discussing a fun new problem someone recently solved or took a shot at. This is eggsactly such a problem that a colleague was asked once at Google&amp;rsquo;s interview.&lt;/p>
&lt;p>The problem statement is as simple as it gets. You&amp;rsquo;re given two identical eggs and a building with 100 floors. Your job is to figure out what is the highest floor from which you can drop the egg without breaking it. Since you&amp;rsquo;re short on time, you have to find the smallest number of trials needed to figure this out. Of course it goes without saying that once you break one of the eggs you can no longer use it again in a trial. And if you break both before finding the optimal number of trials&lt;/p>
&lt;p>&lt;img src="images//obi-wan-dissing.gif#center" alt="Obi-wan-dissing">&lt;/p>
&lt;p>So how do we do this. In interviews it&amp;rsquo;s just as much about your thought process as it is about the actual solution itself. So let&amp;rsquo;s take a structured approach to figuring this out. The naive method would be to simply keep dropping an egg starting from the first floor and then from every successive floor until it breaks. The answer to the problem is then &lt;code>n-1&lt;/code> trials where &lt;code>n&lt;/code> is the lowest floor from which a free fall would bring humpty dumpty to his demise.&lt;/p>
&lt;p>In the worst case this would require us to use 100 trials. Since that&amp;rsquo;s the total number of floors we are not really optimizing anything! A key giveaway to keep in mind when trying to pick apart a problem statement is there is almost never any redundant information. The fact that we were given an extra egg must provide some sort of advantage that would help reduce the number of trials needed.&lt;/p>
&lt;p>If you&amp;rsquo;re experienced with sorting and searching problems then you might have picked up that since the floors are ordered, we can probably use something like binary search to reduce the complexity from &lt;code>O(n)&lt;/code> to &lt;code>O(log(n))&lt;/code>.&lt;/p>
&lt;p>Binary search helps us reduce the range of searching to half the parent range with every iteration until we narrow down on our target. So using binary search, a smart approach could be to drop the first egg from the middle floor (50th). If the egg breaks, then it&amp;rsquo;s logical to believe that it will definitely break from all of the floors above it. So the answer lies somewhere from the first to the 49th floor. We&amp;rsquo;ve already destroyed one of our eggs. So now we can use the second egg to make trials with linear complexity by dropping it from the first all the way to the 49th floor. Similar to the worst case approach, if the egg breaks in the &lt;code>n&lt;/code>-th trial, then we have our answer at &lt;code>n-1&lt;/code>. If the first egg didn&amp;rsquo;t break, then we know that it definitely wouldn&amp;rsquo;t break in any of the floors below. So our range of interest now becomes from the 51st to the 100th floor. We keep shortening the range until the first egg breaks. Doing this would result in a worst case solution of 50. Which is half of our previous worst cast solution. A simple code for this is given below.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c++" data-lang="c++">&lt;span style="color:#75715e">#include&lt;/span>&lt;span style="color:#75715e">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">#define MAX_FLOORS 100
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">didBreak&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> floor);
&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">searchRange&lt;/span> {
&lt;span style="color:#66d9ef">int&lt;/span> low;
&lt;span style="color:#66d9ef">int&lt;/span> high;
} Range;
Range &lt;span style="color:#a6e22e">binSearch&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> low, &lt;span style="color:#66d9ef">int&lt;/span> high) {
&lt;span style="color:#66d9ef">int&lt;/span> mid &lt;span style="color:#f92672">=&lt;/span> (low &lt;span style="color:#f92672">+&lt;/span> high)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span>(didBreak(mid)) {
Range r;
r.low &lt;span style="color:#f92672">=&lt;/span> low;
r.high &lt;span style="color:#f92672">=&lt;/span> mid&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> r;
}
binSearch(mid&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, high);
}
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv) {
ios_base&lt;span style="color:#f92672">::&lt;/span>sync_with_stdio(false);
&lt;span style="color:#75715e">// trials with first egg
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Range searchIn &lt;span style="color:#f92672">=&lt;/span> binSearch(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">100&lt;/span>);
&lt;span style="color:#75715e">// trials with second egg
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> searchIn.low; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> searchIn.high; i&lt;span style="color:#f92672">++&lt;/span>)
{
&lt;span style="color:#66d9ef">if&lt;/span>(didBreak(i))
{
cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;span style="color:#66d9ef">break&lt;/span>;
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By using the first egg to cut the range in half we&amp;rsquo;ve managed to make the second search much shorter. Not bad, but can we do better? This is where you put your insticts to good use and try to go back to the first principles of a logarithmic search. What other strategy could we adopt to shorten the range that would yield the greatest savings? Let&amp;rsquo;s explore a few such ranges.&lt;/p>
&lt;p>What happens if we drop the first egg from the 10th floor. If it breaks, then we only have to search the first 9 floors bringing our required trials to just 19. If the egg doesn&amp;rsquo;t break, then we can try 10 floors above that from the 20th. At whichever trial the egg breaks, we only have to search 9 floors- starting from the floor of the last trial where the egg survived to the next where it broke. Doing this the maximum number of trials we would need for the first egg would be 10, since we&amp;rsquo;re dropping from the 10th all the way to the 100th in increments of 10.&lt;/p>
&lt;p>&lt;img src="images//floor-range.png#center" alt="Binary-search-floor">&lt;/p>
&lt;p>For the second egg the number of drops is always going to be 9. Because just as for the case of halving we reduce the search space for the second egg to be &lt;code>100/2-1 = 49&lt;/code> floors, in the case of dividing the range in 10, the maximum number of trials with the second egg turns out to be &lt;code>100/10-1 = 9&lt;/code>. We can now formulate the number of trials to find the answer in terms of the number of floors &lt;code>num_floors&lt;/code>, the number of trials needed with the first egg &lt;code>t1&lt;/code> and the number of trials needed with the second egg &lt;code>t2&lt;/code> as &lt;code>t1 + num_floors/t1 - 1&lt;/code>. This term is the sum of the trials needed using the first and second egg.&lt;/p>
&lt;p>For the first egg, worst case # of trials needed: &lt;code>t1&lt;/code>&lt;/p>
&lt;p>For the second egg, worst case # of trials needed given we know &lt;code>t1&lt;/code>: &lt;code>num_floors/t1 - 1&lt;/code>.&lt;/p>
&lt;p>Look closely, the more &lt;code>t1&lt;/code> seems to increase, i.e the more number of trials we are willing to do with the first egg (by dividing the range into smaller portions), the larger smaller the value for the number of trials needed with the second egg becomes.&lt;/p>
&lt;p>&lt;img src="images//inverse-prop.png" alt="Inversely-proportional">&lt;/p>
&lt;p>The diagram above clearly shows how these two variables are inversely correlated. There&amp;rsquo;s an optimal point where we find a number &lt;code>t1&lt;/code> for which the total number of trials is minimized.&lt;/p>
&lt;p>Instead of dropping the first egg in equal intervals, we can take a staggered interval that is reduced in successive trials. We want to make it such that the the difference between successive trials gradually decreases to 1 as we reach the top floor. If the very first drop we make is from floor #14, and it breaks, then use the second egg and drop it from floors #1-#13 making our total number of trials in the worst case to be 14 (1 with the first egg and 13 with the second). If the first egg does not break at floor #14, instead of dropping it at an equal interval of 14 from floor #28, we drop it from floor #27, using the idea of successively decreasing intervals. This makes our number of trials using the first egg to be 2 (first from #14 and second from #27). But if the egg breaks from this floor, notice how our range for the second egg is now only 12 (from the 15th to the 26th floor). Summing these two values we get the worst case number of trials needed for both the eggs combined to be 14, just as before. By reducing the range for the second egg every time we need an additional trial with the first egg, we are compensating for increasing values of &lt;code>t1&lt;/code> and keeping the total number of trials constant at 14.&lt;/p>
&lt;p>It can be proven using induction that this is the optimal strategy and that the optimal answer for 100 floors is indeed 14. But how did we come up with 14? Try the same problem for a buidling with only 50 floors. The proof is left as an exercise because I need to make breakfast now. Sunny side up! 🍳🍳&lt;/p></description></item><item><title>Expectation Maximization and the Student-t distribution</title><link>http://rasheddoha.github.io/2020/05/expectation-maximization-and-the-student-t-distribution/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2020/05/expectation-maximization-and-the-student-t-distribution/</guid><description>&lt;p>In the previous post I explained the basic idea behind using maximum likelihood estimation to fit parametric probability distributions over data. While this works for cases where&lt;/p></description></item><item><title>An intuitive understanding of maximum likelihood estimation</title><link>http://rasheddoha.github.io/2020/03/an-intuitive-understanding-of-maximum-likelihood-estimation/</link><pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2020/03/an-intuitive-understanding-of-maximum-likelihood-estimation/</guid><description>&lt;p>One of the very fundamental problems that machine learning seeks to solve is trying to predict outcomes under certain degrees of uncertainty. But before we get to the heart of the probability theory that works behind the scenes let&amp;rsquo;s start small. Even if we have little to no familiarity with how machine learning works, most of us know the very basic form of prediction model- the linear curve fit. I have a chair.&lt;/p></description></item><item><title>Paper review: Conditional Probability Models for Deep Image Compression (CVPR 2019)</title><link>http://rasheddoha.github.io/2019/10/paper-review-conditional-probability-models-for-deep-image-compression-cvpr-2019/</link><pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2019/10/paper-review-conditional-probability-models-for-deep-image-compression-cvpr-2019/</guid><description>&lt;p>Following up on the PixelRNN and PixelCNN architectures, we look at a paper that uses the distrib&lt;/p></description></item><item><title>Generating images with autoregressive models</title><link>http://rasheddoha.github.io/2019/09/generating-images-with-autoregressive-models/</link><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2019/09/generating-images-with-autoregressive-models/</guid><description>&lt;p>Although GANs are great at producing realistic images, the distributions they learn are implicit. For many applications, having a model that can learn the distribution of natural images&lt;/p></description></item><item><title>Learning to learn- that's so meta!</title><link>http://rasheddoha.github.io/2019/06/learning-to-learn-thats-so-meta/</link><pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2019/06/learning-to-learn-thats-so-meta/</guid><description>&lt;p>When you&amp;rsquo;re too lazy to get a neural net to learn from data you get it to learn how to do that too.&lt;/p></description></item><item><title>How to prove you're human- solving captchas with Keras</title><link>http://rasheddoha.github.io/2019/03/how-to-prove-youre-human-solving-captchas-with-keras/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2019/03/how-to-prove-youre-human-solving-captchas-with-keras/</guid><description>&lt;p>The robot civil rights movement has gained wind since Francois Chollet blessed us with Keras.&lt;/p></description></item><item><title>U-Nets and Semantic Segmentation</title><link>http://rasheddoha.github.io/2019/02/u-nets-and-semantic-segmentation/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2019/02/u-nets-and-semantic-segmentation/</guid><description>&lt;p>One of the hardest challenges in making dank memes is cropping out subjects from the background well. It&amp;rsquo;d be swell if we could get AI to do the heavy lifting for us?&lt;/p></description></item><item><title>Fake it till you make it- Generative Adversarial Nets</title><link>http://rasheddoha.github.io/2018/12/fake-it-till-you-make-it-generative-adversarial-nets/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/12/fake-it-till-you-make-it-generative-adversarial-nets/</guid><description>&lt;p>According to Geoffrey Hinton, Generative Adversarial Networks are the most remarkable idea&lt;/p></description></item><item><title>We gotta help get this 🐸 out of this maze</title><link>http://rasheddoha.github.io/2018/11/we-gotta-help-get-this-out-of-this-maze/</link><pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/11/we-gotta-help-get-this-out-of-this-maze/</guid><description>&lt;p>After playing around with some searching and shortest path algorithms in my previous post, it&amp;rsquo;s always a good idea to put them to practice with a fun programming problem.&lt;/p></description></item><item><title>Searching through graphs</title><link>http://rasheddoha.github.io/2018/10/searching-through-graphs/</link><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/10/searching-through-graphs/</guid><description>&lt;p>As a freshman taking part in my first major robotics competition one of the first problems I had to solve was making it figure out how to go from one location to another faster than the rest. The naive idea of simply taking locally steps towards the goal proved to be futile as expected, it&amp;rsquo;s never that easy.&lt;/p></description></item><item><title>Another day, another design pattern- MVCC</title><link>http://rasheddoha.github.io/2018/07/another-day-another-design-pattern-mvcc/</link><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/07/another-day-another-design-pattern-mvcc/</guid><description>&lt;p>In a previous post, I talked about how OOP principles like encapsulation were necessary
components from a software design perspective. Design patterns are certain conventions of
project structuring that have been battle tested to produce robust results&lt;/p>
&lt;p>that are impervious to
breaking apart 6 months from release.&lt;/p></description></item><item><title>Searching over ranges with segment trees</title><link>http://rasheddoha.github.io/2018/06/searching-over-ranges-with-segment-trees/</link><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/06/searching-over-ranges-with-segment-trees/</guid><description>&lt;p>Segment trees are what the cool kids in Samsung use to solve problems.&lt;/p></description></item><item><title>Recurrent Neural Networks</title><link>http://rasheddoha.github.io/2018/06/recurrent-neural-networks/</link><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/06/recurrent-neural-networks/</guid><description>&lt;p>In the previous article we looked at images, which can be considered as 2D signals.&lt;/p></description></item><item><title>CNNs are anything but fake news</title><link>http://rasheddoha.github.io/2018/03/cnns-are-anything-but-fake-news/</link><pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/03/cnns-are-anything-but-fake-news/</guid><description>&lt;p>CNN is fake news.&lt;/p></description></item><item><title>Basics of feed forward neural nets</title><link>http://rasheddoha.github.io/2018/01/basics-of-feed-forward-neural-nets/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2018/01/basics-of-feed-forward-neural-nets/</guid><description>&lt;p>Cool story bro.&lt;/p></description></item><item><title>AVL- Bringing balance to the ~~force~~ tree</title><link>http://rasheddoha.github.io/2017/10/avl-bringing-balance-to-the-~~force~~-tree/</link><pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2017/10/avl-bringing-balance-to-the-~~force~~-tree/</guid><description>&lt;p>Been away from a while.&lt;/p></description></item><item><title>Binary Search Trees</title><link>http://rasheddoha.github.io/2017/08/binary-search-trees/</link><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2017/08/binary-search-trees/</guid><description>&lt;p>&lt;img src="images/bst.jpg" alt="Binary Search Tree">&lt;/p>
&lt;p>If you&amp;rsquo;re someone with a serious case of OCD then you&amp;rsquo;re all too familiar with how difficult it is to keep things perfectly organized. The binary search tree is a data structure that can solve many of such woes.&lt;/p></description></item><item><title>Why some things are best kept private: Encapsulation in OOP</title><link>http://rasheddoha.github.io/2017/07/why-some-things-are-best-kept-private-encapsulation-in-oop/</link><pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2017/07/why-some-things-are-best-kept-private-encapsulation-in-oop/</guid><description>&lt;p>&lt;img src="images/encapsulation-oop.jpeg" alt="Encapsulation">&lt;/p>
&lt;p>Whenever we come across an introductory or somewhat intermediate text on object oriented programming there’s always someone there to remind us of the importance of encapsulating an object’s member variables. In layman’s terms, that means to make sure that you don’t allow direct access to an object’s members but instead make use of getters and setters. This is of course important, in fact it is one of the four principles of OOP which are-&lt;/p>
&lt;ol>
&lt;li>Encapsulation&lt;/li>
&lt;li>Inheritence&lt;/li>
&lt;li>Abstraction&lt;/li>
&lt;li>Polymorphism&lt;/li>
&lt;/ol>
&lt;p>The importance and practical usefulness of the last three are usually intuitive and easier to grasp. However, the purpose of the first principle is often abstracted by vague advice such as&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;It’s safer to make everything private.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“It’s best practice. Everyone does it.”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“Accessing member variables directly can cause major security issues”&lt;/p>
&lt;/blockquote>
&lt;p>While these do sound like the kind of factors you’d want to account for when developing software, as a beginner who’s just getting started. This can feel like something that is “sometimes” or “most of the times” important, but not always. There’s a simple answer to this question of Why should I make my variables private?&lt;/p>
&lt;p>Because it allows you to prevent users from setting your object’s properties to invalid values. For example, suppose you have a rectangle object. And it has two properties- height and width.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">drawOnCanvas&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Canvas c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
c&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">draw&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now if someone was to create a Rectangle object and had the freedom of assigning any heights and widths they wish by using the dot operator, that could mistakenly set a negative value for a positive length and that would prevent your object from drawing or creating a valid rectangle.&lt;/p>
&lt;p>This could be solved by making both the length and width private and allowing modifications through a setter method.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">setLength&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> length&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>length &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">=&lt;/span> length&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// or some error handling code
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getLength&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we are saving our code from breaking but this brings us to wonder that perhaps it’s only important when there are a fixed range of valid values for properties. Such as only positive integers for the example above. What if my object doesn’t have any restriction like that. What if I simply have a variable that is valid for whatever value a user might assign by a direct dot operation?&lt;/p>
&lt;p>Here’s a short story that should clear up why it’s the use of encapsulation is not selectively important, but imperative in general.&lt;/p>
&lt;hr>
&lt;p>You just joined a new firm which is known for creating wonderful cloud solutions for its customers. Employees of the firm are allowed their own cloud storage for free. But this process is still just getting started. As a simple task, your boss asked you to write a client side program that will allow employees of the organization to write their own code that can access cloud storage space allocated for that employee.&lt;/p>
&lt;p>Your boss wants to keep things simple for you, so he says that the backend will reject all invalid size allocations such as negative sizes. So you figure that this is simply a case of writing a storage class with a size property that users are free to access, since the backend will deal with negative sizes, you don’t have to worry about encapsulating them either.&lt;/p>
&lt;blockquote>
&lt;p>Boss: “Okay I think I forgot to mention one small thing. Storage space isn’t limitless. I can only afford to provide up to a terabyte of storage for each employee.”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You: “Wait but you said the server handles invalid values for sizes”&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Boss: “Well yes, but this isn’t really invalid. This is just heavy on the budget. The server doesn’t know that. You have to fix this.”&lt;/p>
&lt;/blockquote>
&lt;p>Oh boy, now you’re in trouble. So what happened was that some employees started allocating excessively large sizes for their cloud storage. While some stayed within the limits. But the problem is, if you fix the code by simply marking the size as private and allowing access through a setter method that checks for sizes exceeding the maximum amount, you break everyone’s code, including the ones that didn’t allocate a wrong size. Since everyone was using the dot operator for access, once you change the code, everyone’s code that had the dot operator access in it, will break. So everyone will have to change their code as well. That might be embarrassing.&lt;/p>
&lt;p>This is poor &lt;strong>maintainability&lt;/strong>. And the very purpose of &lt;strong>OOP&lt;/strong> and &lt;strong>design patterns&lt;/strong> in general is to make sure your work is future proof. Meaning, no matter what spec changes come at you in the future, you’ll be safe.&lt;/p>
&lt;p>If you started with the size as private and only allowed access via a simple setter method that checked for nothing, all you’d have to do for the second version would be to add the condition in the method and the users who were not assigning invalid sizes wouldn’t have any trouble. Their code would work as if nothing had changes.&lt;/p>
&lt;p>Truth is, even the simplest of applications will probably turn into something entirely different down the road. But if you’re careful, then whatever happens, Encapsulation has you covered. So remember, it’s always safe to cover up. &lt;em>In both life and in code&lt;/em>.&lt;/p></description></item><item><title>A peek inside JavaScript: First-class functions and Closures</title><link>http://rasheddoha.github.io/2017/06/a-peek-inside-javascript-first-class-functions-and-closures/</link><pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate><guid>http://rasheddoha.github.io/2017/06/a-peek-inside-javascript-first-class-functions-and-closures/</guid><description>&lt;p>&lt;img src="images/peek-inside-js.jpeg" alt="Javascript">&lt;/p>
&lt;p>One of the best ways to learn a new programming language is to ask yourself two important questions-&lt;/p>
&lt;ol>
&lt;li>What makes this language different?&lt;/li>
&lt;li>What do I need it for?&lt;/li>
&lt;/ol>
&lt;p>Probably the first thing that comes to mind when talking about JavaScript as a programming language is its event-driven architecture. Simply put, this means that even after the script has run, the code lives in memory allowing it to respond to events. And this ability of jumping to a specific function in the script makes it seem like it’s executing hundreds of lines of code blazing fast. This makes it the perfect choice for developing event-driven real time applications as is the case with NodeJs. This is something that makes JavaScript &lt;strong>Awesome&lt;/strong> but also &lt;em>Weird&lt;/em>&amp;hellip; here’s why.&lt;/p>
&lt;p>Consider the following event handler that responds to a click&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">button&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">button&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All this does is increment a global counter variable every time a button is clicked. Simple enough. Even after the script has run, the function can be called in response to an event and it has access to the global variable because it exists in memory. But it’s always good practice to use local variables whenever possible. So let’s look at how that could be.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">button&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">button&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But this won’t work, because obviously the local variable inside the function will always be reset to 0 every time the event fires. So we need to approach this a little differently.&lt;br>
\&lt;/p>
&lt;h3 id="first-class-functions-are-just-like-primitives-and-objects">“First-class functions are just like primitives and objects”&lt;/h3>
&lt;p>In JavaScript functions are treated as &lt;a href="https://en.wikipedia.org/wiki/First-class_citizen">&lt;em>first-class-citizens&lt;/em>&lt;/a>. What this basically means is that just like primitive values and objects, functions can be&lt;/p>
&lt;ul>
&lt;li>Assigned to variables&lt;/li>
&lt;li>Returned from functions&lt;/li>
&lt;li>Passed as arguments to functions&lt;/li>
&lt;/ul>
&lt;p>This helps us solve our problem by returning a
function from a function that will have access to a variable from it’s parent function. This might start to sound like a script from the movie Inception, but it’s simple once you wrap your head around it. Let’s look at what I mean&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">button&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>);
&lt;span style="color:#75715e">// First we create a function that has the local variable count inside it
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">parentFunction&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// Local variable inside the function
&lt;/span>&lt;span style="color:#75715e">// Now we define a child function inside this function that will increment the count variable
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">newFunc&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>; &lt;span style="color:#75715e">// child function increments the parent&amp;#39;s variable
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span>);
}
&lt;span style="color:#75715e">// Finally we return this child function when we execute the parent function
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newFunc&lt;/span>;
}
&lt;span style="color:#a6e22e">button&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">parentFunction&lt;/span>()); &lt;span style="color:#75715e">// Invoking the parent function so it returns the child function as the argument to the event handler
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The event handler in the code accepts an event as the first and a function as the second argument.&lt;/p>
&lt;p>As the second argument, we pass the invocation of the parent function so essentially we pass in the child function it returns as the second argument to the event handler. It’s important to note that the parent function isn’t returning the execution of the child function. It’s returning a reference to the child function so it can be executed whenever deemed necessary to do so.&lt;/p>
&lt;p>So the idea of first-class functions provide a lot of flexibility in the case of how we conventionally think about functions as return values vs an actual object with properties and behavior.&lt;/p>
&lt;p>Now if you examine the code above, something seems a bit off. Once the parent function runs, and returns the new child function, we are essentially out of the execution context of the parent function and thus should not have access to its local variables. So after a function has run, trying to access any of its local variables should cause a null pointer exception or in JavaScript terms, the value of undefined. So how is it, that the child function can increment the parent’s counter variable as if it’s a global variable? That’s where closures come in.&lt;/p>
&lt;h3 id="a-closure-is-a-function-plus-its-immediate-environment-or-lexical-scope">“A closure is a function plus its immediate environment or lexical scope”&lt;/h3>
&lt;p>Contrary to the scoping rules imposed on functions in many of the other languages, JavaScript functions have lexical scope. Meaning that regardless of the execution context of a function, it’s scope will always be the scope defined in the way the script is written. The word lexical basically means what you can see. So in code, the variables you can see a function have access to by the way it’s written, is the variables it will have access to as part of its scope- regardless of the context in which it is run. These two concepts of first-class functions and closures are two of the three most confusing parts of JavaScript for someone coming from a language background like Java or C++. The third one is how the “this” keyword is bound to values. That deserves a separate writing of its own.&lt;/p>
&lt;p>Despite the initial confusion surrounding closures, it can be a very effective tool for writing clever and efficient code, if used correctly.&lt;/p>
&lt;p>I’ve written a pen for this topic for those interested-&lt;/p>
&lt;script
data-slug-hash="KqvLgV"
data-user="RashedDoha"
data-height="500"
data-default-tab="js"
data-theme-id="8862"
class='codepen'
async
src="//codepen.io/assets/embed/ei.js"
>&lt;/script></description></item></channel></rss>