<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts ‚úèÔ∏è on An internet page</title>
    <link>http://rasheddoha.github.io/posts/</link>
    <description>Recent content in Posts ‚úèÔ∏è on An internet page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;#169; Rashed Doha. All rights reserved.</copyright>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://rasheddoha.github.io/posts/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google interview problem: Drop an egg without breaking it</title>
      <link>http://rasheddoha.github.io/2020/07/google-interview-problem-drop-an-egg-without-breaking-it/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2020/07/google-interview-problem-drop-an-egg-without-breaking-it/</guid>
      <description>&lt;p&gt;I really like problems that battle test your understanding of an algorithm or data structure at
a deeper level.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expectation Maximization and the Student-t distribution</title>
      <link>http://rasheddoha.github.io/2020/05/expectation-maximization-and-the-student-t-distribution/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2020/05/expectation-maximization-and-the-student-t-distribution/</guid>
      <description>&lt;p&gt;In the previous post I explained the basic idea behind using maximum likelihood estimation to fit parametric probability distributions over data. While this works for cases where&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An intuitive understanding of maximum likelihood estimation</title>
      <link>http://rasheddoha.github.io/2020/03/an-intuitive-understanding-of-maximum-likelihood-estimation/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2020/03/an-intuitive-understanding-of-maximum-likelihood-estimation/</guid>
      <description>&lt;p&gt;One of the very fundamental problems that machine learning seeks to solve is trying to predict outcomes under certain degrees of uncertainty. But before we get to the heart of the probability theory that works behind the scenes let&amp;rsquo;s start small. Even if we have little to no familiarity with how machine learning works, most of us know the very basic form of prediction model- the linear curve fit. I have a chair.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paper review: Conditional Probability Models for Deep Image Compression (CVPR 2019)</title>
      <link>http://rasheddoha.github.io/2019/10/paper-review-conditional-probability-models-for-deep-image-compression-cvpr-2019/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2019/10/paper-review-conditional-probability-models-for-deep-image-compression-cvpr-2019/</guid>
      <description>&lt;p&gt;Following up on the PixelRNN and PixelCNN architectures, we look at a paper that uses the distrib&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating images with autoregressive models</title>
      <link>http://rasheddoha.github.io/2019/09/generating-images-with-autoregressive-models/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2019/09/generating-images-with-autoregressive-models/</guid>
      <description>&lt;p&gt;Although GANs are great at producing realistic images, the distributions they learn are implicit. For many applications, having a model that can learn the distribution of natural images&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning to learn- that&#39;s so meta!</title>
      <link>http://rasheddoha.github.io/2019/06/learning-to-learn-thats-so-meta/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2019/06/learning-to-learn-thats-so-meta/</guid>
      <description>&lt;p&gt;When you&amp;rsquo;re too lazy to get a neural net to learn from data you get it to learn how to do that too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to prove you&#39;re human- solving captchas with Keras</title>
      <link>http://rasheddoha.github.io/2019/03/how-to-prove-youre-human-solving-captchas-with-keras/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2019/03/how-to-prove-youre-human-solving-captchas-with-keras/</guid>
      <description>&lt;p&gt;The robot civil rights movement has gained wind since Francois Chollet blessed us with Keras.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>U-Nets and Semantic Segmentation</title>
      <link>http://rasheddoha.github.io/2019/02/u-nets-and-semantic-segmentation/</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2019/02/u-nets-and-semantic-segmentation/</guid>
      <description>&lt;p&gt;One of the hardest challenges in making dank memes is cropping out subjects from the background well. It&amp;rsquo;d be swell if we could get AI to do the heavy lifting for us?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fake it till you make it- Generative Adversarial Nets</title>
      <link>http://rasheddoha.github.io/2018/12/fake-it-till-you-make-it-generative-adversarial-nets/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/12/fake-it-till-you-make-it-generative-adversarial-nets/</guid>
      <description>&lt;p&gt;According to Geoffrey Hinton, Generative Adversarial Networks are the most remarkable idea&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We gotta help get this üê∏ out of this maze</title>
      <link>http://rasheddoha.github.io/2018/11/we-gotta-help-get-this-out-of-this-maze/</link>
      <pubDate>Thu, 22 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/11/we-gotta-help-get-this-out-of-this-maze/</guid>
      <description>&lt;p&gt;After playing around with some searching and shortest path algorithms in my previous post, it&amp;rsquo;s always a good idea to put them to practice with a fun programming problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Searching through graphs</title>
      <link>http://rasheddoha.github.io/2018/10/searching-through-graphs/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/10/searching-through-graphs/</guid>
      <description>&lt;p&gt;As a freshman taking part in my first major robotics competition one of the first problems I had to solve was making it figure out how to go from one location to another faster than the rest. The naive idea of simply taking locally steps towards the goal proved to be futile as expected, it&amp;rsquo;s never that easy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Another day, another design pattern- MVCC</title>
      <link>http://rasheddoha.github.io/2018/07/another-day-another-design-pattern-mvcc/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/07/another-day-another-design-pattern-mvcc/</guid>
      <description>&lt;p&gt;In a previous post, I talked about how OOP principles like encapsulation were necessary
components from a software design perspective. Design patterns are certain conventions of
project structuring that have been battle tested to produce robust results&lt;/p&gt;
&lt;p&gt;that are impervious to
breaking apart 6 months from release.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Searching over ranges with segment trees</title>
      <link>http://rasheddoha.github.io/2018/06/searching-over-ranges-with-segment-trees/</link>
      <pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/06/searching-over-ranges-with-segment-trees/</guid>
      <description>&lt;p&gt;Segment trees are what the cool kids in Samsung use to solve problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recurrent Neural Networks</title>
      <link>http://rasheddoha.github.io/2018/06/recurrent-neural-networks/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/06/recurrent-neural-networks/</guid>
      <description>&lt;p&gt;In the previous article we looked at images, which can be considered as 2D signals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CNNs are anything but fake news</title>
      <link>http://rasheddoha.github.io/2018/03/cnns-are-anything-but-fake-news/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/03/cnns-are-anything-but-fake-news/</guid>
      <description>&lt;p&gt;CNN is fake news.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basics of feed forward neural nets</title>
      <link>http://rasheddoha.github.io/2018/01/basics-of-feed-forward-neural-nets/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2018/01/basics-of-feed-forward-neural-nets/</guid>
      <description>&lt;p&gt;Cool story bro.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AVL- Bringing balance to the ~~force~~ tree</title>
      <link>http://rasheddoha.github.io/2017/10/avl-bringing-balance-to-the-~~force~~-tree/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2017/10/avl-bringing-balance-to-the-~~force~~-tree/</guid>
      <description>&lt;p&gt;Been away from a while.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Binary Search Trees</title>
      <link>http://rasheddoha.github.io/2017/08/binary-search-trees/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2017/08/binary-search-trees/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/bst.jpg&#34; alt=&#34;Binary Search Tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re someone with a serious case of OCD then you&amp;rsquo;re all too familiar with how difficult it is to keep things perfectly organized.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why some things are best kept private: Encapsulation in OOP</title>
      <link>http://rasheddoha.github.io/2017/07/why-some-things-are-best-kept-private-encapsulation-in-oop/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2017/07/why-some-things-are-best-kept-private-encapsulation-in-oop/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/encapsulation-oop.jpeg&#34; alt=&#34;Encapsulation&#34;&gt;&lt;/p&gt;
&lt;p&gt;Whenever we come across an introductory or somewhat intermediate text on object oriented programming there‚Äôs always someone there to remind us of the importance of encapsulating an object‚Äôs member variables. In layman‚Äôs terms, that means to make sure that you don‚Äôt allow direct access to an object‚Äôs members but instead make use of getters and setters. This is of course important, in fact it is one of the four principles of OOP which are-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Inheritence&lt;/li&gt;
&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The importance and practical usefulness of the last three are usually intuitive and easier to grasp. However, the purpose of the first principle is often abstracted by vague advice such as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;It‚Äôs safer to make everything private.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt‚Äôs best practice. Everyone does it.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÄúAccessing member variables directly can cause major security issues‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While these do sound like the kind of factors you‚Äôd want to account for when developing software, as a beginner who‚Äôs just getting started. This can feel like something that is ‚Äúsometimes‚Äù or ‚Äúmost of the times‚Äù important, but not always. There‚Äôs a simple answer to this question of Why should I make my variables private?&lt;/p&gt;
&lt;p&gt;Because it allows you to prevent users from setting your object‚Äôs properties to invalid values. For example, suppose you have a rectangle object. And it has two properties- height and width.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Rectangle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; height&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; width&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;drawOnCanvas&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Canvas c&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;draw&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;    
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if someone was to create a Rectangle object and had the freedom of assigning any heights and widths they wish by using the dot operator, that could mistakenly set a negative value for a positive length and that would prevent your object from drawing or creating a valid rectangle.&lt;/p&gt;
&lt;p&gt;This could be solved by making both the length and width private and allowing modifications through a setter method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setLength&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; length&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// or some error handling code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getLength&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we are saving our code from breaking but this brings us to wonder that perhaps it‚Äôs only important when there are a fixed range of valid values for properties. Such as only positive integers for the example above. What if my object doesn‚Äôt have any restriction like that. What if I simply have a variable that is valid for whatever value a user might assign by a direct dot operation?&lt;/p&gt;
&lt;p&gt;Here‚Äôs a short story that should clear up why it‚Äôs the use of encapsulation is not selectively important, but imperative in general.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You just joined a new firm which is known for creating wonderful cloud solutions for its customers. Employees of the firm are allowed their own cloud storage for free. But this process is still just getting started. As a simple task, your boss asked you to write a client side program that will allow employees of the organization to write their own code that can access cloud storage space allocated for that employee.&lt;/p&gt;
&lt;p&gt;Your boss wants to keep things simple for you, so he says that the backend will reject all invalid size allocations such as negative sizes. So you figure that this is simply a case of writing a storage class with a size property that users are free to access, since the backend will deal with negative sizes, you don‚Äôt have to worry about encapsulating them either.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Boss: ‚ÄúOkay I think I forgot to mention one small thing. Storage space isn‚Äôt limitless. I can only afford to provide up to a terabyte of storage for each employee.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You: ‚ÄúWait but you said the server handles invalid values for sizes‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Boss: ‚ÄúWell yes, but this isn‚Äôt really invalid. This is just heavy on the budget. The server doesn‚Äôt know that. You have to fix this.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh boy, now you‚Äôre in trouble. So what happened was that some employees started allocating excessively large sizes for their cloud storage. While some stayed within the limits. But the problem is, if you fix the code by simply marking the size as private and allowing access through a setter method that checks for sizes exceeding the maximum amount, you break everyone‚Äôs code, including the ones that didn‚Äôt allocate a wrong size. Since everyone was using the dot operator for access, once you change the code, everyone‚Äôs code that had the dot operator access in it, will break. So everyone will have to change their code as well. That might be embarrassing.&lt;/p&gt;
&lt;p&gt;This is poor &lt;strong&gt;maintainability&lt;/strong&gt;. And the very purpose of &lt;strong&gt;OOP&lt;/strong&gt; and &lt;strong&gt;design patterns&lt;/strong&gt; in general is to make sure your work is future proof. Meaning, no matter what spec changes come at you in the future, you‚Äôll be safe.&lt;/p&gt;
&lt;p&gt;If you started with the size as private and only allowed access via a simple setter method that checked for nothing, all you‚Äôd have to do for the second version would be to add the condition in the method and the users who were not assigning invalid sizes wouldn‚Äôt have any trouble. Their code would work as if nothing had changes.&lt;/p&gt;
&lt;p&gt;Truth is, even the simplest of applications will probably turn into something entirely different down the road. But if you‚Äôre careful, then whatever happens, Encapsulation has you covered. So remember, it‚Äôs always safe to cover up. &lt;em&gt;In both life and in code&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A peek inside JavaScript: First-class functions and Closures</title>
      <link>http://rasheddoha.github.io/2017/06/a-peek-inside-javascript-first-class-functions-and-closures/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rasheddoha.github.io/2017/06/a-peek-inside-javascript-first-class-functions-and-closures/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;images/peek-inside-js.jpeg&#34; alt=&#34;Javascript&#34;&gt;&lt;/p&gt;
&lt;p&gt;One of the best ways to learn a new programming language is to ask yourself two important questions-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What makes this language different?&lt;/li&gt;
&lt;li&gt;What do I need it for?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Probably the first thing that comes to mind when talking about JavaScript as a programming language is its event-driven architecture. Simply put, this means that even after the script has run, the code lives in memory allowing it to respond to events. And this ability of jumping to a specific function in the script makes it seem like it‚Äôs executing hundreds of lines of code blazing fast. This makes it the perfect choice for developing event-driven real time applications as is the case with NodeJs. This is something that makes JavaScript &lt;strong&gt;Awesome&lt;/strong&gt; but also &lt;em&gt;Weird&lt;/em&gt;&amp;hellip; here‚Äôs why.&lt;/p&gt;
&lt;p&gt;Consider the following event handler that responds to a click&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All this does is increment a global counter variable every time a button is clicked. Simple enough. Even after the script has run, the function can be called in response to an event and it has access to the global variable because it exists in memory. But it‚Äôs always good practice to use local variables whenever possible. So let‚Äôs look at how that could be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this won‚Äôt work, because obviously the local variable inside the function will always be reset to 0 every time the event fires. So we need to approach this a little differently.&lt;br&gt;
\&lt;/p&gt;
&lt;h3 id=&#34;first-class-functions-are-just-like-primitives-and-objects&#34;&gt;‚ÄúFirst-class functions are just like primitives and objects‚Äù&lt;/h3&gt;
&lt;p&gt;In JavaScript functions are treated as &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_citizen&#34;&gt;&lt;em&gt;first-class-citizens&lt;/em&gt;&lt;/a&gt;. What this basically means is that just like primitive values and objects, functions can be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assigned to variables&lt;/li&gt;
&lt;li&gt;Returned from functions&lt;/li&gt;
&lt;li&gt;Passed as arguments to functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This helps us solve our problem by returning a
function from a function that will have access to a variable from it‚Äôs parent function. This might start to sound like a script from the movie Inception, but it‚Äôs simple once you wrap your head around it. Let‚Äôs look at what I mean&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;// First we create a function that has the local variable count inside it
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parentFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Local variable inside the function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Now we define a child function inside this function that will increment the count variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newFunc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// child function increments the parent&amp;#39;s variable
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;);
  }
  
  &lt;span style=&#34;color:#75715e&#34;&gt;// Finally we return this child function when we execute the parent function
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newFunc&lt;/span&gt;;
  
  
  
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parentFunction&lt;/span&gt;()); &lt;span style=&#34;color:#75715e&#34;&gt;// Invoking the parent function so it returns the child function as the argument to the event handler
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The event handler in the code accepts an event as the first and a function as the second argument.&lt;/p&gt;
&lt;p&gt;As the second argument, we pass the invocation of the parent function so essentially we pass in the child function it returns as the second argument to the event handler. It‚Äôs important to note that the parent function isn‚Äôt returning the execution of the child function. It‚Äôs returning a reference to the child function so it can be executed whenever deemed necessary to do so.&lt;/p&gt;
&lt;p&gt;So the idea of first-class functions provide a lot of flexibility in the case of how we conventionally think about functions as return values vs an actual object with properties and behavior.&lt;/p&gt;
&lt;p&gt;Now if you examine the code above, something seems a bit off. Once the parent function runs, and returns the new child function, we are essentially out of the execution context of the parent function and thus should not have access to its local variables. So after a function has run, trying to access any of its local variables should cause a null pointer exception or in JavaScript terms, the value of undefined. So how is it, that the child function can increment the parent‚Äôs counter variable as if it‚Äôs a global variable? That‚Äôs where closures come in.&lt;/p&gt;
&lt;h3 id=&#34;a-closure-is-a-function-plus-its-immediate-environment-or-lexical-scope&#34;&gt;‚ÄúA closure is a function plus its immediate environment or lexical scope‚Äù&lt;/h3&gt;
&lt;p&gt;Contrary to the scoping rules imposed on functions in many of the other languages, JavaScript functions have lexical scope. Meaning that regardless of the execution context of a function, it‚Äôs scope will always be the scope defined in the way the script is written. The word lexical basically means what you can see. So in code, the variables you can see a function have access to by the way it‚Äôs written, is the variables it will have access to as part of its scope- regardless of the context in which it is run. These two concepts of first-class functions and closures are two of the three most confusing parts of JavaScript for someone coming from a language background like Java or C++. The third one is how the ‚Äúthis‚Äù keyword is bound to values. That deserves a separate writing of its own.&lt;/p&gt;
&lt;p&gt;Despite the initial confusion surrounding closures, it can be a very effective tool for writing clever and efficient code, if used correctly.&lt;/p&gt;
&lt;p&gt;I‚Äôve written a pen for this topic for those interested-&lt;/p&gt;







&lt;script
    data-slug-hash=&#34;KqvLgV&#34;
    data-user=&#34;RashedDoha&#34;
    data-height=&#34;500&#34;
    data-default-tab=&#34;js&#34;
    data-theme-id=&#34;8862&#34;
    class=&#39;codepen&#39;
    async
    src=&#34;//codepen.io/assets/embed/ei.js&#34;
&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>